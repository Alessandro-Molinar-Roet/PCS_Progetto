@startuml
package FracturesNetworkLibrary <<Folder>> #DarkSlateBlue
{
class Fracture 
{
+ ID: unsigned int
+ Vertices: MatrixXd
+ Passing : vector<unsigned int>
+ Not passing : vector<unsigned int>

}
class Trace
{
+ ID : unsigned int
+ Length : double
+ Vertices : Matrix<double,3,2>
+ First_generator : unsigned int
+ Second_generator : unsigned int 
}
class Mesh
{
{static} Cell0D
+ NumberCell0D : unsigned int
+ Cell0DId : vector<unsigned int>
+ Cell0DCoordinates : vector<Vector3d>

{static} Cell1D
+ NumberCell1D : unsigned int
+ Cell1DId : vector<unsigned int>
+ Cell1DVertices : vector<Vector2i>

{static} Cell2D
+ NumberCell2D : unsigned int
+ Cell2DId : vector<unsigned int>
+ Cell2DVertices : vector<vector<unsigned int>>
+ Cell2DEdges : vector<vector<unsigned int>>
}
class Vector3dHash
{
+ operator() : size_t Vector3d
}
class pair_hash
{
+ operator() : size_t pair(unsigned int, unsigned int)
}
}
package Funzioni <<Folder>> #mediumPurple
{
abstract class Geometry
{
+ isInside(frattura, tr1, direzione, intersezioni, lato) : bool
+ cutting(fratture, tracce) : list<MatrixXd>
+ split(polygon, passing, tracce, counter, cutted) : void
+ extractinfo(cutted, mesh)
}
abstract class tol
{
+ standard : extern const double
+ tol1 : extern double
+ tol2 : extern double
}
}
package DFNParaview <<Folder>> %darken("magenta",25)
{
class Paraview
{
+ export_paraview2 : (vector<MatrixXd>)
}
}
package DFNTest <<Folder>> %darken("magenta",25)
{
class Tests
{
+ splitTest
}
}
Trace ..[thickness=2]> Fracture : created by intersection of 2
Trace --[thickness=2]> Geometry
Mesh --[thickness=2]> Geometry
Fracture --[thickness=2]> Geometry
Vector3dHash --[thickness=2]> Geometry
pair_hash --[thickness=2]> Geometry
Funzioni --[thickness=2]> DFNTest
Funzioni --[thickness=2]> DFNParaview

note left of Geometry::isInside
<color:Blue> MatrixXd, Vector3d, Vector3d, vector<Vector3d>, vector<unsigned int>
end note
note left of Geometry::cutting
<color:Blue> vector<Fracture>, vector<Trace>
end note
note left of Geometry::split
<color:Blue> MatrixXd, vector<unsigned int>, vector<Trace>, unsigned int, list<MatrixXd>
end note
note left of Geometry::extractinfo
<color:Blue> list<MatrixXd>, Mesh
end note

@enduml
